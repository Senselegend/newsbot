import unittest
from unittest.mock import patch, MagicMock
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ sys.path –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from ai_service import AIService

class TestAIService(unittest.TestCase):
    def setUp(self):
        self.ai_service = AIService(ai_provider="openrouter")
        self.test_article = {
            'title': '–¢–µ—Å—Ç–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å',
            'content': '–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–∏—Å–∞',
            'quotes': ['–í–∞–∂–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'],
            'tags': ['—Ç–µ—Å—Ç', '–Ω–æ–≤–æ—Å—Ç—å']
        }
    
    def test_clean_summary(self):
        """–¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ —Ä–µ–∑—é–º–µ –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤"""
        # –¢–µ—Å—Ç —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º
        summary = "–≤–æ—Ç –∫—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞: –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Ä–µ–∑—é–º–µ"
        result = self.ai_service._clean_summary(summary)
        self.assertEqual(result, "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Ä–µ–∑—é–º–µ")
        
        # –¢–µ—Å—Ç –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞
        summary = "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Ä–µ–∑—é–º–µ –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞"
        result = self.ai_service._clean_summary(summary)
        self.assertEqual(result, "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Ä–µ–∑—é–º–µ –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞")
        
        # –¢–µ—Å—Ç —Å –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π
        summary = ""
        result = self.ai_service._clean_summary(summary)
        self.assertEqual(result, "")
        
        # –¢–µ—Å—Ç —Å None
        summary = None
        result = self.ai_service._clean_summary(summary)
        self.assertEqual(result, "")
    
    def test_get_prompt_hash(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ö—ç—à–∞ –∑–∞–ø—Ä–æ—Å–∞"""
        prompt1 = "–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å"
        prompt2 = "–î—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å"
        
        hash1 = self.ai_service._get_prompt_hash(prompt1)
        hash2 = self.ai_service._get_prompt_hash(prompt1)  # –¢–æ—Ç –∂–µ –∑–∞–ø—Ä–æ—Å
        hash3 = self.ai_service._get_prompt_hash(prompt2)  # –î—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å
        
        # –•—ç—à–∏ –¥–ª—è –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å
        self.assertEqual(hash1, hash2)
        
        # –•—ç—à–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–æ–ª–∂–Ω—ã –æ—Ç–ª–∏—á–∞—Ç—å—Å—è
        self.assertNotEqual(hash1, hash3)
    
    def test_cache_response(self):
        """–¢–µ—Å—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤"""
        prompt_hash = "test_hash"
        response = "–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫—ç—à –ø—É—Å—Ç
        self.assertIsNone(self.ai_service._get_cached_response(prompt_hash))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∫—ç—à
        self.ai_service._cache_response(prompt_hash, response)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∫—ç—à–µ
        self.assertEqual(self.ai_service._get_cached_response(prompt_hash), response)
    
    @patch('ai_service.requests.post')
    def test_summarize_article_gemini(self, mock_post):
        """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∑—é–º–µ —á–µ—Ä–µ–∑ Gemini API"""
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫
        self.ai_service.ai_provider = "gemini"
        self.ai_service.gemini_api_key = "test_key"
        
        mock_response = MagicMock()
        mock_response.status_code = 200
        mock_response.json.return_value = {
            "candidates": [{"content": {"parts": [{"text": "–¢–µ—Å—Ç–æ–≤–æ–µ —Ä–µ–∑—é–º–µ –Ω–æ–≤–æ—Å—Ç–∏"}]}}]
        }
        mock_post.return_value = mock_response
        
        # –í—ã–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º—ã–π –º–µ—Ç–æ–¥
        result = self.ai_service.summarize_article(self.test_article)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        self.assertEqual(result, "–¢–µ—Å—Ç–æ–≤–æ–µ —Ä–µ–∑—é–º–µ –Ω–æ–≤–æ—Å—Ç–∏")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤ API
        mock_post.assert_called_once()
    
    @patch('ai_service.AIService._call_openrouter_api')
    def test_summarize_article_openrouter(self, mock_api_call):
        """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∑—é–º–µ —á–µ—Ä–µ–∑ OpenRouter API"""
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫
        self.ai_service.ai_provider = "openrouter"
        self.ai_service.api_key = "test_key"
        
        mock_api_call.return_value = {
            "choices": [{"message": {"content": "–¢–µ—Å—Ç–æ–≤–æ–µ —Ä–µ–∑—é–º–µ –Ω–æ–≤–æ—Å—Ç–∏"}}]
        }
        
        # –í—ã–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º—ã–π –º–µ—Ç–æ–¥
        result = self.ai_service.summarize_article(self.test_article)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        self.assertEqual(result, "–¢–µ—Å—Ç–æ–≤–æ–µ —Ä–µ–∑—é–º–µ –Ω–æ–≤–æ—Å—Ç–∏")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤ API
        mock_api_call.assert_called_once()
    
    def test_fallback_hashtags(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö —Ö–µ—à—Ç–µ–≥–æ–≤"""
        # –¢–µ—Å—Ç —Å —Ä–æ—Å—Å–∏–π—Å–∫–æ–π –Ω–æ–≤–æ—Å—Ç—å—é
        article_data = {
            'title': '–ù–æ–≤–æ—Å—Ç–∏ –†–æ—Å—Å–∏–∏',
            'content': '–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ —Ä—É–±–ª–µ –∏ —ç–∫–æ–Ω–æ–º–∏–∫–µ –†–æ—Å—Å–∏–∏'
        }
        result = self.ai_service._fallback_hashtags(article_data)
        self.assertTrue(any(tag.startswith('üá∑üá∫') for tag in result))
        
        # –¢–µ—Å—Ç —Å –∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫–æ–π –Ω–æ–≤–æ—Å—Ç—å—é
        article_data = {
            'title': '–ù–æ–≤–æ—Å—Ç–∏ –°–®–ê',
            'content': '–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ –¥–æ–ª–ª–∞—Ä–µ –∏ –§–†–°'
        }
        result = self.ai_service._fallback_hashtags(article_data)
        self.assertTrue(any(tag.startswith('üá∫üá∏') for tag in result))
        
        # –¢–µ—Å—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ —Ç–µ–≥–∞–º–∏
        result = self.ai_service._fallback_hashtags(article_data, custom_tags="#—Ç–µ—Å—Ç #–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π")
        self.assertIn("#—Ç–µ—Å—Ç", result[0])
        self.assertIn("#–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π", result[0])

if __name__ == '__main__':
    unittest.main()